!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
BIAS	g711/g711.c	/^#define	BIAS	/;"	d	file:
CLIP	g711/g711.c	/^#define CLIP /;"	d	file:
CODEC_BIND	codec.cpp	/^CODEC_BIND(opus_codec, DEFAULT_CODEC_PT)$/;"	f
CODEC_BIND	codec.h	/^#define CODEC_BIND(/;"	d
CODEC_PT_NOISE	codec.h	/^#define CODEC_PT_NOISE /;"	d
CODEC_PT_PCMA	codec.h	/^#define CODEC_PT_PCMA /;"	d
CODEC_PT_PCMU	codec.h	/^#define CODEC_PT_PCMU /;"	d
DEFAULT_CODEC_PT	codec.h	/^#define DEFAULT_CODEC_PT /;"	d
JITTER_BUFFER_SIZE	pcap_reader.cpp	/^#define JITTER_BUFFER_SIZE /;"	d	file:
NSEGS	g711/g711.c	/^#define	NSEGS	/;"	d	file:
QUANT_MASK	g711/g711.c	/^#define	QUANT_MASK	/;"	d	file:
SEG_MASK	g711/g711.c	/^#define	SEG_MASK	/;"	d	file:
SEG_SHIFT	g711/g711.c	/^#define	SEG_SHIFT	/;"	d	file:
SIGN_BIT	g711/g711.c	/^#define	SIGN_BIT	/;"	d	file:
TYPE_IPV4	net_header.h	/^#define TYPE_IPV4 /;"	d
TYPE_UDP	net_header.h	/^#define TYPE_UDP /;"	d
TYPE_VLAN	net_header.h	/^#define TYPE_VLAN /;"	d
_CODEC_H_	codec.h	/^#define _CODEC_H_$/;"	d
_G711_H_	g711/g711.h	/^#define _G711_H_$/;"	d
_NET_HEADER_H_	net_header.h	/^#define _NET_HEADER_H_$/;"	d
_PCAP_READER_H_	pcap_reader.h	/^#define _PCAP_READER_H_$/;"	d
_a2u	g711/g711.c	/^unsigned char _a2u[128] = {			\/* A- to u-law conversions *\/$/;"	v	typeref:typename:unsigned char[128]
_u2a	g711/g711.c	/^unsigned char _u2a[128] = {			\/* u- to A-law conversions *\/$/;"	v	typeref:typename:unsigned char[128]
acknowledgenum	net_header.h	/^    unsigned int acknowledgenum;$/;"	m	struct:tcp_header	typeref:typename:unsigned int
alaw2linear	g711/g711.c	/^alaw2linear($/;"	f	typeref:typename:short
alaw2ulaw	g711/g711.c	/^alaw2ulaw($/;"	f	typeref:typename:unsigned char
all	Makefile	/^all:$/;"	t
audio_format	main.cpp	/^    u_int16_t audio_format;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int16_t	file:
bits_per_sample	main.cpp	/^    u_int16_t bits_per_sample;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int16_t	file:
block_align	main.cpp	/^    u_int16_t block_align;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int16_t	file:
byte1	net_header.h	/^    u_char byte1;$/;"	m	struct:ip_address	typeref:typename:u_char
byte2	net_header.h	/^    u_char byte2;$/;"	m	struct:ip_address	typeref:typename:u_char
byte3	net_header.h	/^    u_char byte3;$/;"	m	struct:ip_address	typeref:typename:u_char
byte4	net_header.h	/^    u_char byte4;$/;"	m	struct:ip_address	typeref:typename:u_char
byte_rate	main.cpp	/^    u_int32_t byte_rate;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int32_t	file:
cc	net_header.h	/^    u_char cc : 4;$/;"	m	struct:rtp_header	typeref:typename:u_char:4
checksum	net_header.h	/^    u_short checksum;$/;"	m	struct:tcp_header	typeref:typename:u_short
checksum	net_header.h	/^    u_short checksum;$/;"	m	struct:udp_header	typeref:typename:u_short
chunk_id	main.cpp	/^    char chunk_id[4];$/;"	m	struct:wav_header	typeref:typename:char[4]	file:
chunk_size	main.cpp	/^    u_int32_t chunk_size;$/;"	m	struct:wav_header	typeref:typename:u_int32_t	file:
codec	codec.h	/^class codec$/;"	c
codec_creator	codec.h	/^    codec_creator(unsigned short pt, codec* c)$/;"	f	class:codec_creator
codec_creator	codec.h	/^class codec_creator$/;"	c
crc	net_header.h	/^    u_short crc;$/;"	m	struct:ip_header	typeref:typename:u_short
csrc	net_header.h	/^    u_int32_t csrc[];$/;"	m	struct:rtp_header	typeref:typename:u_int32_t[]
daddr	net_header.h	/^    ip_address daddr;$/;"	m	struct:ip_header	typeref:typename:ip_address
data	pcap_reader.h	/^    std::string data;$/;"	m	class:rtp_packet	typeref:typename:std::string
data_chunk	main.cpp	/^    wav_data_chunk_t data_chunk;$/;"	m	struct:wav_header	typeref:typename:wav_data_chunk_t	file:
decode	codec.cpp	/^std::string g_711_codec::decode(const std::string& last_packet, const std::string& packet)$/;"	f	class:g_711_codec	typeref:typename:std::string
decode	codec.cpp	/^std::string opus_codec::decode(const std::string& last_packet, const std::string& packet)$/;"	f	class:opus_codec	typeref:typename:std::string
dei	net_header.h	/^	u_short dei : 1;$/;"	m	struct:vlan_header	typeref:typename:u_short:1
destport	net_header.h	/^    u_short destport;$/;"	m	struct:tcp_header	typeref:typename:u_short
destport	net_header.h	/^    u_short destport;$/;"	m	struct:udp_header	typeref:typename:u_short
dst	net_header.h	/^    u_char dst[6];$/;"	m	struct:eth_header	typeref:typename:u_char[6]
eth_header	net_header.h	/^typedef struct eth_header$/;"	s
eth_header_t	net_header.h	/^} eth_header_t;$/;"	t	typeref:struct:eth_header
flags_fo	net_header.h	/^    u_short flags_fo;$/;"	m	struct:ip_header	typeref:typename:u_short
fmt_chunk	main.cpp	/^    wav_fmt_chunk_t fmt_chunk;$/;"	m	struct:wav_header	typeref:typename:wav_fmt_chunk_t	file:
format	main.cpp	/^    char format[4];$/;"	m	struct:wav_header	typeref:typename:char[4]	file:
g_711_codec	codec.cpp	/^g_711_codec::g_711_codec()$/;"	f	class:g_711_codec
g_711_codec	codec.h	/^class g_711_codec : public codec$/;"	c
g_creator_map	codec.cpp	/^std::unordered_map <unsigned short, std::shared_ptr<codec>> g_creator_map;$/;"	v	typeref:typename:std::unordered_map<unsigned short,std::shared_ptr<codec>>
get_codec_by_payload_type	codec.h	/^    static std::shared_ptr<codec> get_codec_by_payload_type(unsigned short pt)$/;"	f	class:codec	typeref:typename:std::shared_ptr<codec>
get_next_rtp	pcap_reader.cpp	/^std::shared_ptr<rtp_packet> pcap_reader::get_next_rtp(const char* src_ip, const char* dst_ip, co/;"	f	class:pcap_reader	typeref:typename:std::shared_ptr<rtp_packet>
get_packet	pcap_reader.cpp	/^std::shared_ptr<rtp_packet> jitter_buffer::get_packet(bool clear)$/;"	f	class:jitter_buffer	typeref:typename:std::shared_ptr<rtp_packet>
get_payload_type	codec.h	/^    unsigned short get_payload_type()$/;"	f	class:codec	typeref:typename:unsigned short
get_sample_rate	codec.cpp	/^uint32_t g_711_codec::get_sample_rate()$/;"	f	class:g_711_codec	typeref:typename:uint32_t
get_sample_rate	codec.cpp	/^uint32_t opus_codec::get_sample_rate()$/;"	f	class:opus_codec	typeref:typename:uint32_t
header	pcap_reader.h	/^    rtp_header_t header;$/;"	m	class:rtp_packet	typeref:typename:rtp_header_t
headerlenandflag	net_header.h	/^    u_short headerlenandflag;$/;"	m	struct:tcp_header	typeref:typename:u_short
id	net_header.h	/^	u_short id : 12;$/;"	m	struct:vlan_header	typeref:typename:u_short:12
identification	net_header.h	/^    u_short identification;$/;"	m	struct:ip_header	typeref:typename:u_short
ip_address	net_header.h	/^typedef struct ip_address$/;"	s
ip_address_t	net_header.h	/^}ip_address_t;$/;"	t	typeref:struct:ip_address
ip_header	net_header.h	/^typedef struct ip_header$/;"	s
ip_header_t	net_header.h	/^}ip_header_t;$/;"	t	typeref:struct:ip_header
jitter_buffer	pcap_reader.cpp	/^jitter_buffer::jitter_buffer(size_t buf_size): m_size(buf_size), m_last_seq(-1)$/;"	f	class:jitter_buffer
jitter_buffer	pcap_reader.h	/^class jitter_buffer$/;"	c
length	net_header.h	/^    u_short length;$/;"	m	struct:udp_header	typeref:typename:u_short
linear2alaw	g711/g711.c	/^linear2alaw(short pcm_val)	\/* 2's complement (16-bit range) *\/$/;"	f	typeref:typename:unsigned char
linear2ulaw	g711/g711.c	/^linear2ulaw($/;"	f	typeref:typename:unsigned char
m	net_header.h	/^    u_char m  : 1;$/;"	m	struct:rtp_header	typeref:typename:u_char:1
m_buffer	pcap_reader.h	/^    jitter_buffer m_buffer;$/;"	m	class:pcap_reader	typeref:typename:jitter_buffer
m_last_seq	pcap_reader.h	/^    int m_last_seq;$/;"	m	class:jitter_buffer	typeref:typename:int
m_list	pcap_reader.h	/^    std::list<std::shared_ptr<rtp_packet>> m_list;$/;"	m	class:jitter_buffer	typeref:typename:std::list<std::shared_ptr<rtp_packet>>
m_opus_decoder	codec.h	/^    OpusDecoder* m_opus_decoder;$/;"	m	class:opus_codec	typeref:typename:OpusDecoder *
m_pcap_handler	pcap_reader.h	/^    pcap_t* m_pcap_handler;$/;"	m	class:pcap_reader	typeref:typename:pcap_t *
m_size	pcap_reader.h	/^    size_t m_size;$/;"	m	class:jitter_buffer	typeref:typename:size_t
main	main.cpp	/^int main(int argc, const char* argv[])$/;"	f	typeref:typename:int
make	README.md	/^# make$/;"	c
num_channels	main.cpp	/^    u_int16_t num_channels;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int16_t	file:
opus_codec	codec.h	/^class opus_codec : public codec$/;"	c
p	net_header.h	/^    u_char p  : 1;$/;"	m	struct:rtp_header	typeref:typename:u_char:1
pcap_reader	pcap_reader.cpp	/^pcap_reader::pcap_reader(std::string& filename):m_buffer(JITTER_BUFFER_SIZE)$/;"	f	class:pcap_reader
pcap_reader	pcap_reader.h	/^class pcap_reader$/;"	c
priority	net_header.h	/^	u_short priority : 3;$/;"	m	struct:vlan_header	typeref:typename:u_short:3
proto	net_header.h	/^    u_char proto;$/;"	m	struct:ip_header	typeref:typename:u_char
pt	codec.h	/^    unsigned short pt;$/;"	m	class:codec	typeref:typename:unsigned short
pt	net_header.h	/^    u_char pt : 7;$/;"	m	struct:rtp_header	typeref:typename:u_char:7
put_packet	pcap_reader.cpp	/^void jitter_buffer::put_packet(std::shared_ptr<rtp_packet> packet)$/;"	f	class:jitter_buffer	typeref:typename:void
rtp_decoder	README.md	/^# rtp_decoder$/;"	c
rtp_header	net_header.h	/^typedef struct rtp_header$/;"	s
rtp_header_t	net_header.h	/^}rtp_header_t;$/;"	t	typeref:struct:rtp_header
rtp_packet	pcap_reader.h	/^class rtp_packet$/;"	c
saddr	net_header.h	/^    ip_address saddr;$/;"	m	struct:ip_header	typeref:typename:ip_address
sample_rate	main.cpp	/^    u_int32_t sample_rate;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int32_t	file:
search	g711/g711.c	/^static short search($/;"	f	typeref:typename:short	file:
seg_aend	g711/g711.c	/^static short seg_aend[8] = {0x1F, 0x3F, 0x7F, 0xFF,$/;"	v	typeref:typename:short[8]	file:
seg_uend	g711/g711.c	/^static short seg_uend[8] = {0x3F, 0x7F, 0xFF, 0x1FF,$/;"	v	typeref:typename:short[8]	file:
seq	net_header.h	/^    u_int16_t seq;$/;"	m	struct:rtp_header	typeref:typename:u_int16_t
sequnum	net_header.h	/^    unsigned int sequnum;$/;"	m	struct:tcp_header	typeref:typename:unsigned int
set_payload_type	codec.h	/^    void set_payload_type(unsigned short pt)$/;"	f	class:codec	typeref:typename:void
sourport	net_header.h	/^    u_short sourport;$/;"	m	struct:tcp_header	typeref:typename:u_short
sourport	net_header.h	/^    u_short sourport;$/;"	m	struct:udp_header	typeref:typename:u_short
src	net_header.h	/^    u_char src[6];$/;"	m	struct:eth_header	typeref:typename:u_char[6]
ssrc	net_header.h	/^    u_int32_t ssrc;$/;"	m	struct:rtp_header	typeref:typename:u_int32_t
sub_chunk_id	main.cpp	/^    char sub_chunk_id[4];$/;"	m	struct:wav_data_chunk	typeref:typename:char[4]	file:
sub_chunk_id	main.cpp	/^    char sub_chunk_id[4];$/;"	m	struct:wav_fmt_chunk	typeref:typename:char[4]	file:
sub_chunk_size	main.cpp	/^    u_int32_t sub_chunk_size;$/;"	m	struct:wav_data_chunk	typeref:typename:u_int32_t	file:
sub_chunk_size	main.cpp	/^    u_int32_t sub_chunk_size;$/;"	m	struct:wav_fmt_chunk	typeref:typename:u_int32_t	file:
tcp_header	net_header.h	/^typedef struct tcp_header$/;"	s
tcp_header_t	net_header.h	/^}tcp_header_t;$/;"	t	typeref:struct:tcp_header
timestamp	net_header.h	/^    u_int32_t timestamp;$/;"	m	struct:rtp_header	typeref:typename:u_int32_t
tlen	net_header.h	/^    u_short tlen;$/;"	m	struct:ip_header	typeref:typename:u_short
tos	net_header.h	/^    u_char tos;$/;"	m	struct:ip_header	typeref:typename:u_char
ttl	net_header.h	/^    u_char ttl;$/;"	m	struct:ip_header	typeref:typename:u_char
type	net_header.h	/^	u_short type;$/;"	m	struct:vlan_header	typeref:typename:u_short
type	net_header.h	/^    u_short type;$/;"	m	struct:eth_header	typeref:typename:u_short
udp_header	net_header.h	/^typedef struct udp_header$/;"	s
udp_header_t	net_header.h	/^}udp_header_t;$/;"	t	typeref:struct:udp_header
ulaw2alaw	g711/g711.c	/^ulaw2alaw($/;"	f	typeref:typename:unsigned char
ulaw2linear	g711/g711.c	/^ulaw2linear($/;"	f	typeref:typename:short
urgentpointer	net_header.h	/^    u_short urgentpointer;$/;"	m	struct:tcp_header	typeref:typename:u_short
v	net_header.h	/^    u_char v  : 1;$/;"	m	struct:rtp_header	typeref:typename:u_char:1
ver_ihl	net_header.h	/^    u_char ver_ihl;$/;"	m	struct:ip_header	typeref:typename:u_char
vlan_header	net_header.h	/^typedef struct vlan_header$/;"	s
vlan_header_t	net_header.h	/^} vlan_header_t;$/;"	t	typeref:struct:vlan_header
wav_data_chunk	main.cpp	/^typedef struct wav_data_chunk$/;"	s	file:
wav_data_chunk_t	main.cpp	/^} wav_data_chunk_t;$/;"	t	typeref:struct:wav_data_chunk	file:
wav_fmt_chunk	main.cpp	/^typedef struct wav_fmt_chunk$/;"	s	file:
wav_fmt_chunk_t	main.cpp	/^} wav_fmt_chunk_t;$/;"	t	typeref:struct:wav_fmt_chunk	file:
wav_header	main.cpp	/^typedef struct wav_header$/;"	s	file:
wav_header_t	main.cpp	/^}wav_header_t;$/;"	t	typeref:struct:wav_header	file:
windowsize	net_header.h	/^    u_short windowsize;$/;"	m	struct:tcp_header	typeref:typename:u_short
x	net_header.h	/^    u_char x  : 1;$/;"	m	struct:rtp_header	typeref:typename:u_char:1
~codec	codec.h	/^    virtual ~codec(){}$/;"	f	class:codec
~g_711_codec	codec.cpp	/^g_711_codec::~g_711_codec()$/;"	f	class:g_711_codec
~jitter_buffer	pcap_reader.cpp	/^jitter_buffer::~jitter_buffer()$/;"	f	class:jitter_buffer
~opus_codec	codec.cpp	/^opus_codec::~opus_codec()$/;"	f	class:opus_codec
~pcap_reader	pcap_reader.cpp	/^pcap_reader::~pcap_reader()$/;"	f	class:pcap_reader
